import { Button, VerticalBox, CheckBox, LineEdit, StandardTableView, Switch, Slider, SpinBox, StandardButton, ScrollView } from "std-widgets.slint";

struct PassEntry {
    id: int,
    username: string,
    url: string,
    passphrase: string,
    notes: string,
}

export component AddOkDialog inherits Dialog {
    in-out property <string> message;
    
    Text {
        text: message;
    }
    StandardButton {kind: ok;}
    StandardButton {kind: cancel;}
}
export component AppWindow inherits Window {
    in-out property <string> message;
    in-out property <int> counter: 42;
    out property <string> user_name: uname.text;
    out property <string> url: url.text;
    in-out property <string> passphrase;
    out property <string> notes: notes.text;
    out property <int> passlength: l.value;
    in property <[string]> table;
    in-out property <[[StandardListViewItem]]> table_rows;
    callback request-increase-value();
    callback request-decrease-value();
    callback exit();
    callback clear_form();
    callback new_pass_clicked();
    callback update_db_clicked();
    

    property <bool> active: true;
    property <InputType> is_pass: password;
    property <InputType> is_not_pass: text;
    
    
    
    states [
        active when active: {
            pass_phrase.input-type: password;
        }
        inactive when !active: {
            pass_phrase.input-type: text;
        }
    ]

    property <int> value: 10;
    timer := Timer {
        interval: 1s;
        running: true;
        triggered() => {
            value -= 1;
            if (value == 0) {
                self.running = false;
                message = "";
            }
        }
    }

    VerticalBox {
        GridLayout {
            padding: 25px;
            spacing: 5px;
            Row {
                Button {
                    text: "New Password";
                    clicked => {
                        root.new_pass_clicked();
                    }
                }
                Button {
                    text: "Copy Passphrase";
                    clicked => {
                        pass_phrase.select-all();
                        pass_phrase.copy();
                        pass_phrase.clear-selection();
                        
                    }
                    height: 30px;
                }
                Button {
                    text: "Copy Username";
                    clicked => {
                        uname.select-all();
                        uname.copy();
                        uname.clear-selection();
                        
                    }
                    height: 30px;
                }
                Button {
                    text: "Exit";
                    clicked => {
                        root.exit();
                    }
                    height: 30px;
                }
            }
            
            Row {
                Text {
                    text: "User Name";
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                uname := LineEdit {
                    col: 1;
                    colspan: 3;
                    max-height: 25px;
                    padding-top: 25px;
                }
            }
            Row{
                Text {
                    text: "URL";
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                url := LineEdit {
                    col: 1;
                    colspan: 3;
                    max-height: 25px;
                    padding-top: 25px;
                }
            }
            Row{
                Text {
                    text: "Passphrase";
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                pass_phrase := LineEdit {
                    text: root.passphrase;
                    col: 1;
                    colspan: 3;
                    max-height: 25px;
                    padding-top: 25px;
                    input-type: password;
                }
            }
            Row{
                Text {
                    text: "Notes";
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                notes := LineEdit {
                    col: 1;
                    colspan: 3;
                    max-height: 25px;
                    padding-top: 25px;
                }
            }
            Row {
                message_area := Text {
                    col: 0;
                    text: root.message;
                    changed text => {
                        timer.running = true;
                    }
                }
                Button {
                    text: "Clear Form";
                    col: 1;
                    clicked => {
                        uname.text = "";
                        url.text = "";
                        notes.text = "";
                        root.new_pass_clicked();
                    }
                    height: 30px;
                }
                Button {
                    text: "Edit";
                    height: 30px;
                    col: 2;
                    clicked => {
                        root.update_db_clicked();
                    }
                }
                Button {
                    text: "Add";
                    height: 30px;
                    col: 3;
                    clicked => {
                        root.update_db_clicked();
                    }
                }
                
            }
          
            Row {
                StandardTableView {
                    col: 0;
                    colspan: 4;
                    // Define the columns of the table
                    columns: [
                        { title: "id" },
                        { title: "username" },
                        { title: "url" },
                        // { title: "passphrase" },
                        { title: "notes" }
                    ];
                    rows: table_rows;
                    current-row-changed(current-row) => {
                        debug(self.rows[current-row]);
                    }
                }
                
            }
        
            // Define the data model property
        
            // Define the PassEntry structure
        
            Row {
                sw := Switch {
                    text: "Hide/View Passwords";
                    checked: true;
                    colspan: 2;
                    toggled => {
                        active = !active;
                    }
                }
                
                l := SpinBox {
                    minimum: 8;
                    maximum: 100;
                    value: 15;
                    col: 3;
                    changed value => {
                        passlength = self.value;
                    }
                }
            }
            
            
            
        }
        
    }

}