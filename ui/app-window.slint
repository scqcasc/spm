import { Button, VerticalBox, CheckBox, LineEdit, StandardTableView, Switch, Slider, SpinBox, StandardButton, ScrollView, TabWidget, GridBox } from "std-widgets.slint";

struct PassEntry {
    id: int,
    username: string,
    url: string,
    passphrase: string,
    notes: string,
}

export component AddOkDialog inherits Dialog {
    in-out property <string> message;
    
    Text {
        text: message;
    }
    StandardButton {kind: ok;}
    StandardButton {kind: cancel;}
}
export component AppWindow inherits Window {
    in-out property <string> message;
    in-out property <int> counter: 42;
    in-out property <string> user_name: uname.text;
    out property <string> url: url.text;
    in-out property <string> passphrase;
    out property <string> notes: notes.text;
    out property <int> passlength: l.value;
    in property <[string]> table;
    in-out property <[[StandardListViewItem]]> table_rows;
    callback request-increase-value();
    callback request-decrease-value();
    callback exit();
    callback clear_form();
    callback new_pass_clicked();
    callback update_db_clicked();
    callback edit_row(row_index: int);
    callback copy_field(row_index: int, field: TableColumn);
    

    property <bool> active: true;
    property <InputType> is_pass: password;
    property <InputType> is_not_pass: text;
    
    private property <int> selected_row;

    
    
    
    states [
        active when active: {
            pass_phrase.input-type: password;
        }
        inactive when !active: {
            pass_phrase.input-type: text;
        }
    ]

    HorizontalLayout {
        spacing: 5px;
        padding: 25px;
        
        Button {
            text: "Exit";
            height: 25px;
    
            clicked => {
                root.exit();
            }
        }

        TabWidget {
        
        
            Tab {
                title: "Form";
                VerticalLayout {
                    padding: 25px;
                    spacing: 5px;
                    GridLayout {
                        Row {
                            Button {
                                text: "New Password";
                                width: 150px;
                                clicked => {
                                    root.new_pass_clicked();
                                }
                            }
                            Button {
                                text: "Copy Passphrase";
                                width: 150px;
            
                                clicked => {
                                    pass_phrase.select-all();
                                    pass_phrase.copy();
                                    pass_phrase.clear-selection();
                                    
                                }
                            }
                            Button {
                                text: "Clear Form";
                              
                                clicked => {
                                    uname.text = "";
                                    url.text = "";
                                    notes.text = "";
                                    root.new_pass_clicked();
                                }
                                width: 150px;
                            }
                            GridBox {
                                
                                rowspan: 2;
                                property <int> value: 0;
                                Row {
                                    timer := Timer {
                                        interval: 1s;
                                        running: true;
                                        triggered() => {
                                            if (value > 0) {
                                                value -= 1;
                                                if (value == 0) {
                                                    self.running = false;
                                                    message = "";
                                                    debug("Timer ended");
                                                }
                                            }
                                            
                                        }
                                    }
                                    Rectangle {
                                        background: blue;
                                        width: 300px;
                                        message_area := Text {
                       
                                            text: root.message;
                                            changed text => {
                                                value = 10;
                                                timer.running = true;
                                                debug("Timer started");
                                            }
                                        }
                                    }
                                    
                                }
                            }
                        }
                        Row{
                            Button {
                                text: "Edit";
                                width: 150px;
                              
                                clicked => {
                                    root.update_db_clicked();
                                }
                            }
                            Button {
                                text: "Copy Username";
                                width: 150px;
                    
                                clicked => {
                                    uname.select-all();
                                    uname.copy();
                                    uname.clear-selection();
                                    
                                }
                            }
                            
                            
                            
                        }
                        
                    }
                    
                    Text {
                        text: "User Name";
                        horizontal-alignment: left;
                        vertical-alignment: center;
                    }
                    uname := LineEdit {
                        max-height: 25px;
                        padding-top: 25px;
                    }
                    Text {
                        text: "URL";
                        horizontal-alignment: left;
                        vertical-alignment: center;
                    }
                    url := LineEdit {
                        max-height: 25px;
                        padding-top: 25px;
                    }
                    Text {
                        text: "Passphrase";
                        horizontal-alignment: left;
                        vertical-alignment: center;
                    }
                    pass_phrase := LineEdit {
                        text: root.passphrase;
                        
                        max-height: 25px;
                        padding-top: 25px;
                        input-type: password;
                    }
                    Text {
                        text: "Notes";
                        horizontal-alignment: left;
                        vertical-alignment: center;
                    }
                    notes := LineEdit {
                        
                        max-height: 25px;
                        padding-top: 25px;
                    }
                    
                    
                    Button {
                        text: "Add";
                        width: 150px;
                      
                        clicked => {
                            root.update_db_clicked();
                        }
                    }
                    Rectangle {}
                    sw := Switch {
                        text: "Hide/View Passwords";
                        checked: true;
                        toggled => {
                            active = !active;
                        }
                    }
                    
                    Text {
                        text: "Password length";
                    }
                   
                    l := SpinBox {
                        minimum: 8;
                        maximum: 100;
                        value: 25;
                        height: 35px;
                        changed value => {
                            passlength = self.value;
                        }
                    }
                    
                } 
            }
    
           Tab {
                // Context menu
                menu_popup := PopupWindow {
                    width: 150px;
                    
                    visible: false;
                    Rectangle {
                        // background: #FFFFFF;
                        border-radius: 8px;
                        padding: 10px;
                        VerticalLayout {
                            spacing: 5px;
        
                            Button {
                                text: "Edit Row";
                                clicked => {
                                    menu_popup.visible = false;
                                    edit_row(selected_row);
                                }
                            }
                            Button {
                                text: "Copy Passphrase";
                                clicked => {
                                    menu_popup.visible = false;
                                    
                                }
                            }
                        }
                    }
                }
                title: "Table";
                VerticalLayout {
                    padding: 25px;
                    spacing: 5px;
            
                    /// Table
                    ScrollView {
                        StandardTableView {
                            width: parent.width;
                            height: parent.height;
                            // Define the columns of the table
                            columns: [
                                { title: "id" },
                                { title: "username" },
                                { title: "url" },
                                { title: "passphrase" },
                                { title: "notes" }
                            ];
                            rows: table_rows;
                            current-row-changed(current-row) => {
                                
                                debug(self.rows[current-row]);
                                root.edit_row(current-row);
                                root.copy_field(current-row, self.columns[2]);
                            }
                        }
                    }   /// End table
                       
                }   
            }
        }   
    }        
}